#!/usr/bin/env python
import argparse
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)))
import arm
from arm.application import Application
import logging

# Logger for the ARM operations
armlogger = logging.getLogger('arm')

def configure_logging(console=True, debug=True):
    armlogger.setLevel(logging.DEBUG)
    # Add the console streaming in console mode
    if console:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.DEBUG)
        console_formatter = logging.Formatter('%(name)s - %(levelname)s - %(message)s')
        console_handler.setFormatter(console_formatter)
        armlogger.addHandler(console_handler)

def main():
    configure_logging()
    # Define the arguments to create the service
    parser = argparse.ArgumentParser()
    parser.add_argument("-l", "--location", 
                        help="Location of the application instance"
    )
    parser.add_argument("name", type=str, 
                        help="Name of the instance"
    )
    parser.add_argument("-p", "--parameters", type=str, 
                        help="Parameters file"
    )
    parser.add_argument("-t", "--template", type=str,
                        help="Template file"
    )
    parser.add_argument("-c", "--config", type=str,
                        help="Authentication file",
                        default="./authent.json"
    )
    parser.add_argument("-i", "--packerimages", type=str, 
                        help="Configurastion for the images generated by packer",
                        default="./packer.json"
    )

    args = parser.parse_args()
    
    # Get the client instance
    armlogger.info("Creating the client instance...")
    arm.instance(args.config)
    
    app = Application(
        args.name,
        args.location,
        os.path.abspath(args.template),
        os.path.abspath(args.parameters),
        os.path.abspath(args.packerimages)
    )
    app.deploy()
    
if __name__ == "__main__":
    main()
    
